C51 COMPILER V9.52.0.0   LIEN_STRUCTURE_COMMANDE                                           05/15/2018 17:36:13 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LIEN_STRUCTURE_COMMANDE
OBJECT MODULE PLACED IN Lien_Structure_commande.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Lien_Structure_commande.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <c8051f020.h>
   2          #include <string.h> 
   3          #include <stdio.h>
   4          #include <intrins.h>
   5          
   6          #include "FO_M1_Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.h"
   7          #include "ADC.h"
   8          #include "Servomoteur_horizontal.h"
   9          #include "ultrason.h"
  10          #include "Fonctions_cote_serializer.h"
  11          #include "Declarations_GPIO.h"
  12          #include "Config_Globale.h"
  13          #include "Timers.h"
  14          #include "Config_SPI.h"
  15          #include "Transmission_SPI.h"
  16          #include "UART0_RingBuffer_lib.h"
  17          #include "ConfigUART1.h"
  18          #include "Lien_Structure_commande.h"
  19          #include "encodage_son.h"
  20          #include "son_sonore.h"
  21          #include "mesure_courant.h"
  22          
  23          #ifndef CFG_Globale
  24            #define CFG_Globale
  25            #include <CFG_Globale.h>
  26          #endif
  27          
  28          //------------------------------------------------------------------------------------
  29          // Déclarations des variables globales
  30          //------------------------------------------------------------------------------------
  31          
  32          char a;
  33          char i =0;
  34          char message_s[50] = {0};
  35          char mess[50] = {0};
  36          void tempo_emiss(void);
  37          struct COMMANDES_SERIALIZER commande_serializer;
  38          float courant_actuel;
  39          float dist_avant;
  40          float dist_arriere;
  41          char Angle_voulu,Angle_atteint,msg_Slave,angle;
  42          extern unsigned int energie;
  43          
  44          void routage(struct COMMANDES commande, enum Routage * type){
  45   1            
  46   1        if (commande.Etat_Servo==Servo_H){
  47   2          *type=Servo_Hor;
  48   2        }   
  49   1        else  if (commande.Etat_Servo==Servo_V){
  50   2          *type=Servo_Vert;
  51   2        }         
  52   1        else if (commande.Etat_Mouvement!=Mouvement_non){
  53   2          *type=Deplacement;
  54   2        }
  55   1        else if (commande.A_Obst!=DCT_non){
C51 COMPILER V9.52.0.0   LIEN_STRUCTURE_COMMANDE                                           05/15/2018 17:36:13 PAGE 2   

  56   2          *type=Obstacle;
  57   2        }
  58   1        else if (commande.Etat_Energie!=Mesure_I){
  59   2          *type=Courant;
  60   2        }
  61   1        else if (commande.Etat_Energie!=Mesure_E){
  62   2          *type=Energie;
  63   2        }
  64   1        else if ( commande.frequence!=0){
  65   2          *type=Gene_Son;
  66   2        }
  67   1      }
  68          // verifier attention effectuer les déclaration avant toute execution de code.    
  69          void fonctionRoutage(struct COMMANDES commande){
  70   1        enum Routage route = Initialisation;
  71   1        unsigned char commande_SPI = 0x00;
  72   1        unsigned char trame[1] = {0x00};
  73   1        unsigned char taille_trame = 1;
  74   1        char angle_ascii[3];
  75   1        char mess[50] = {0};
  76   1        char msg_Slave_ascii[256];  
  77   1        struct INFORMATIONS info;
  78   1        char courant_ascii[4];
  79   1        char energie_ascii[4];
  80   1        routage(commande,&route);
  81   1        
  82   1        switch (route){
  83   2          case Servo_H: 
  84   2            Angle_voulu=commande.Servo_Angle;
  85   2            Angle_atteint = CDE_Servo_H(Angle_voulu);
  86   2            serOutstring("\n\r AS H");
  87   2            
  88   2            memset(mess,0,strlen(mess));
  89   2            strcpy(mess,angle_ascii);
  90   2            strcat(mess,"\n\r>");
  91   2            serOutstring(mess);
  92   2            break;
  93   2          
  94   2          case Servo_V:
  95   2            commande_SPI = 0xD3;
  96   2            trame[0]=commande.Servo_Angle;
  97   2            taille_trame = 1;
  98   2            echange_trame(trame,taille_trame,commande_SPI);
  99   2            tempo_emiss();
 100   2            msg_Slave = trame_recue();
 101   2            tempo_emiss();
 102   2      
 103   2            sprintf(msg_Slave_ascii,"%f",msg_Slave);
 104   2            serOutstring("\n\r AS V");
 105   2            serOutstring("\n\r>");
 106   2            break;
 107   2          
 108   2          case Deplacement: 
 109   2            commande_serializer = transcode_commande_to_serializer(commande);
 110   2            formate_serializer(commande_serializer, message_s);
 111   2            serOutstring1(message_s);
 112   2            serOutstring(message_s);
 113   2      
 114   2            i=0;
 115   2            a=0;
 116   2            do{ 
 117   3              a=serInchar1();
C51 COMPILER V9.52.0.0   LIEN_STRUCTURE_COMMANDE                                           05/15/2018 17:36:13 PAGE 3   

 118   3              if (a!=0x00){
 119   4                mess[i]=a;
 120   4                i=i+1;
 121   4              }
 122   3            }while(a!=0x3E);
 123   2              
 124   2            mess[i] = '\0';
 125   2            serOutstring(mess);
 126   2            break;
 127   2          
 128   2          case Obstacle:
 129   2            memset(mess,0,strlen(mess));
 130   2            info = encode_son(commande);
 131   2            strcpy(mess,"\n\rDistance (cm) : ");
 132   2            serOutstring(mess);
 133   2            serOutstring(info.Tab_Val_Obst);
 134   2            serOutstring("\n\r>");
 135   2            memset(mess,0,strlen(mess));
 136   2            break;
 137   2        
 138   2          case Courant:
 139   2            info.Mesure_Courant = Courant_ADC();
 140   2            sprintf(courant_ascii,"%d", info.Mesure_Courant);
 141   2            serOutstring(courant_ascii);
 142   2            serOutstring("mA\n\r>");
 143   2            break;
 144   2          
 145   2          case Energie : 
 146   2            info.Mesure_Energie = energie;
 147   2            sprintf(energie_ascii,"%d", info.Mesure_Energie);
 148   2            serOutstring(energie_ascii);
 149   2            serOutstring("J\n\r>");
 150   2            break;
 151   2          
 152   2          case Gene_Son:
 153   2            son_sonore(commande);
 154   2            break;
 155   2          
 156   2          default:
 157   2            strcpy(mess, "\n\r#\n\r>");
 158   2            serOutstring(mess);
 159   2            break;
 160   2          
 161   2        }
 162   1      }
 163          
 164          void tempo_emiss(void){ 
 165   1        unsigned int x = 0;
 166   1        
 167   1        for(x=0;x<65000;x++);
 168   1        for(x=0;x<65000;x++);
 169   1        for(x=0;x<65000;x++);
 170   1        for(x=0;x<65000;x++);
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1121    ----
   CONSTANT SIZE    =    114    ----
   XDATA SIZE       =    133     418
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.52.0.0   LIEN_STRUCTURE_COMMANDE                                           05/15/2018 17:36:13 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
